// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  firstName     String        @map("first_name")
  lastName      String        @map("last_name")
  displayName   String        @map("display_name")
  password      String
  dateOfBirth   DateTime?     @map("date_of_birth")
  phoneNumber   String?
  streetAddress String?       @map("street_address")
  country       String?
  city          String?
  stateProvince String?       @map("state_province")
  zip           String?
  role          UserRole
  refreshToken  String?       @map("refresh_token")
  avatarPicture String?       @map("avatar_picture")
  activated     Boolean       @default(false)
  kycInfor      KycInfor?
  campaign      Campaign[]
  Transaction   Transaction[]

  @@map("user")
}

model KycInfor {
  id          Int        @id @default(autoincrement())
  risk        KycRisk
  status      KycStatus  @default(PENDING)
  submittedAt DateTime?  @default(now()) @map("submitted_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  userId      Int        @unique @map("user_id")
  user        User       @relation(fields: [userId], references: [id])
  kycImages   KycImage[]

  @@map("kyc_infor")
}

model KycImage {
  id         Int      @id @default(autoincrement())
  url        String
  kycInforId Int
  kycInfor   KycInfor @relation(fields: [kycInforId], references: [id])

  @@map("kyc_image")
}

model FileStorage {
  id       Int      @id @default(autoincrement())
  url      String
  objectId Int      @map("object_id")
  uploadAt DateTime @default(now()) @map("upload_at")
  fileType FileType

  @@map("file_storage")
}

model Campaign {
  id            Int                @id @default(autoincrement())
  title         String
  description   String?
  localtion     String
  startAt       DateTime           @map("start_at")
  endAt         DateTime           @map("end_at")
  goal          Float              @default(0)
  currentAmount Float              @default(0) @map("current_amount")
  progress      Float              @default(0) @map("progress")
  creatorId     Int                @map("creator_id")
  user          User               @relation(fields: [creatorId], references: [id])
  campaignTags  String[]           @default([])
  status        FundCampaignStatus @default(ON_GOING)
  categories    CategoryCampaign[]
  campaignFiles CampaignFile[]
  transactions  Transaction[]
  campaignBank  CampaignBank?

  @@map("campaign")
}

model CampaignBank {
  id                Int      @id @default(autoincrement())
  bankName          String   @map("bank_name")
  accountHolderName String   @map("account_holder_name")
  bankNumber        String   @map("bank_number")
  campaignId        Int      @unique @map("campaign_id")
  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_bank")
}

model CampaignFile {
  id         Int              @id @default(autoincrement())
  url        String
  campaignId Int              @map("campaign_id")
  uploadAt   DateTime         @default(now()) @map("upload_at")
  type       CampaignFileType @default(IMAGE)
  campaign   Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_file")
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  campaigns CategoryCampaign[]

  @@map("category")
}

model CategoryCampaign {
  categoryId Int @map("category_id")
  campaignId Int @map("campaign_id")

  category Category @relation(fields: [categoryId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([categoryId, campaignId])
  @@map("category_campaign")
}

model Transaction {
  id            Int                      @id @default(autoincrement())
  amount        Float
  paymentMethod TransactionPaymentMethod @default(BANK_TRANSFER) @map("payment_method")
  fundAt        DateTime                 @default(now()) @map("fund_at")
  status        TransactionStatus        @default(PENDING)
  updateDate    DateTime?                @map("update_date")
  generatedNote String                   @map("generated_note")
  userId        Int                      @map("user_id")
  completed     Boolean                  @default(false)
  campaignId    Int                      @map("campaign_id")
  campaign      Campaign                 @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user          User                     @relation(fields: [userId], references: [id])

  @@map("transaction")
}

enum UserRole {
  INVESTOR
  ADMIN
  FUNDRASIER
}

enum FileType {
  KYC_LEGAL_ID
  CAMPAIGN_IMAGE
  CAMPAIGN_BACKGROUND
}

enum KycRisk {
  HIGH
  MEDIUM
  LOW
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CampaignFileType {
  IMAGE
  BACKGROUND
}

enum TransactionStatus {
  PENDING
  PROCESSED
  REFUNDED
}

enum TransactionPaymentMethod {
  BANK_TRANSFER
}

enum FundCampaignStatus {
  ON_GOING
  FAILED
  SUCCEED
}
