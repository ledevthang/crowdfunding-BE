// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  firstName     String     @map("first_name")
  lastName      String     @map("last_name")
  displayName   String     @map("display_name")
  password      String
  dateOfBirth   DateTime?  @map("date_of_birth")
  phoneNumber   String?
  streetAddress String?    @map("street_address")
  country       String?
  city          String?
  stateProvince String?    @map("state_province")
  zip           String?
  role          UserRole
  refreshToken  String?    @map("refresh_token")
  avatarPicture String?    @map("avatar_picture")
  activated     Boolean    @default(false)
  kycInfor      KycInfor?
  campaign      Campaign[]

  @@map("user")
}

model KycInfor {
  id          Int       @id @default(autoincrement())
  risk        KycRisk
  status      KycStatus
  submittedAt DateTime  @map("submitted_at")
  updatedAt   DateTime  @map("updated_at")
  userId      Int       @unique @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  @@map("kyc_infor")
}

model FileStorage {
  id       Int      @id @default(autoincrement())
  url      String
  objectId Int      @map("object_id")
  uploadAt DateTime @default(now()) @map("upload_at")
  fileType FileType

  @@map("file_storage")
}

model Campaign {
  id            Int                @id @default(autoincrement())
  title         String
  description   String?
  localtion     String
  startAt       DateTime           @map("start_at")
  endAt         DateTime           @map("end_at")
  goal          Float              @default(0)
  currentAmount Float              @default(0) @map("current_amount")
  investor      Int                @default(0)
  creatorId     Int                @map("creator_id")
  user          User               @relation(fields: [creatorId], references: [id])
  campaignTags  String[]           @default([])
  categories    CategoryCampaign[]
  campaignFiles CampaignFile[]

  @@map("campaign")
}

model CampaignFile {
  id         Int              @id @default(autoincrement())
  url        String
  campaignId Int              @map("campaign_id")
  uploadAt   DateTime         @default(now()) @map("upload_at")
  type       CampaignFileType @default(IMAGE)
  campaign   Campaign         @relation(fields: [campaignId], references: [id])

  @@map("campaign_file")
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  campaigns CategoryCampaign[]

  @@map("category")
}

model CategoryCampaign {
  categoryId Int @map("category_id")
  campaignId Int @map("campaign_id")

  category Category @relation(fields: [categoryId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@id([categoryId, campaignId])
  @@map("category_campaign")
}

enum UserRole {
  INVESTOR
  ADMIN
  FUNDRASIER
}

enum FileType {
  KYC_LEGAL_ID
  CAMPAIGN_IMAGE
  CAMPAIGN_BACKGROUND
}

enum KycRisk {
  HIGH
  MEDIUM
  LOW
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CampaignFileType {
  IMAGE
  BACKGROUND
}
